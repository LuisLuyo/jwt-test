\echo ************************  INICIO EJECUCION SCRIPT 1.Schema-Table.sql  ************************
\echo ************************  1. SET VARIABLES DE SCRIPT
\set postgres_user "adminfrances1720T"
\set postgres_db "francesTest"
\set postgres_tz 'America/Lima'
\echo ************************  postgres_user: :postgres_user **************************************
\echo ************************  postgres_db  : :postgres_db ****************************************
\echo ************************  postgres_tz  : :postgres_tz ****************************************

CREATE DATABASE postgres_db;
--USE postgres_db;
--CREATE USER adminfrances1720D with password 'Frances1720D@2020'; DESARROLLO PC LOCAL
--CREATE USER postgres_user with password 'Frances1720@2020T'; ----CREA ROL
--CREACION DE SCHEMAS 

\c :postgres_db
ALTER DATABASE :postgres_db SET TIMEZONE TO :'postgres_tz';

\echo ************************  2. CREACION DE ESQUEMAS ********************************************
CREATE SCHEMA IF NOT EXISTS SIGV_MAESTRO AUTHORIZATION :postgres_user;
CREATE SCHEMA IF NOT EXISTS SIGV_SEGURIDAD AUTHORIZATION :postgres_user;
CREATE SCHEMA IF NOT EXISTS SIGV_PERSONA AUTHORIZATION :postgres_user;
CREATE SCHEMA IF NOT EXISTS SIGV_VENTAS AUTHORIZATION :postgres_user;
CREATE SCHEMA IF NOT EXISTS SIGV_INVENTARIO AUTHORIZATION :postgres_user;

\echo ************************  3. CREACION DE TABLAS EN SIGV_MAESTRO  *****************************
CREATE TABLE IF NOT EXISTS SIGV_MAESTRO.OPERACION(
  IDOPERACION SERIAL NOT NULL,
  DESCRIPCION CHARACTER VARYING(300),
  CONSTRAINT OPERACION_PKEY PRIMARY KEY (IDOPERACION)
);
ALTER TABLE SIGV_MAESTRO.OPERACION
  OWNER TO :postgres_user;

INSERT INTO SIGV_MAESTRO.OPERACION (DESCRIPCION) VALUES('INICIO DE SESION CORRECTO');
INSERT INTO SIGV_MAESTRO.OPERACION (DESCRIPCION) VALUES('CLAVE INGRESADA INCORRECTA');
INSERT INTO SIGV_MAESTRO.OPERACION (DESCRIPCION) VALUES('INGRESO DE USUARIO ANULADO');

\echo ************************  4. CREACION DE TABLAS EN SIGV_SEGURIDAD ****************************

CREATE TABLE IF NOT EXISTS SIGV_SEGURIDAD.TERMINAL(
  IDTERMINAL SERIAL NOT NULL,
  TERMINAL CHARACTER VARYING(5),
  IDSUCURSAL INTEGER,
  UNIQUEDEVICEID CHARACTER VARYING(40),
  TRACE BIT(1),
  ESTADO CHARACTER VARYING(1),
  CONSTRAINT TERMINAL_PKEY PRIMARY KEY (IDTERMINAL)
);
ALTER TABLE SIGV_SEGURIDAD.TERMINAL
  OWNER TO :postgres_user;

INSERT INTO SIGV_SEGURIDAD.TERMINAL (TERMINAL, IDSUCURSAL, UNIQUEDEVICEID, TRACE, ESTADO) VALUES('INIT1',1,'INIT-TERMINAL-PRUEBA',1::BIT,'A');

CREATE TABLE IF NOT EXISTS SIGV_SEGURIDAD.USUARIO(
  IDUSUARIO SERIAL NOT NULL,
  USUARIO CHARACTER VARYING(20),
  CLAVE CHARACTER VARYING(20),
  IDPERFIL INTEGER,
  IDCOLABORADOR INTEGER,
  ESTADO CHARACTER VARYING(1),
  IDSUCURSAL INTEGER,
  ONLINE INTEGER,
  PCKGSMS INTEGER,
  IDUSUARIOALTA INTEGER,
  CANALALTA  CHARACTER VARYING(10),
  FECHAALTA TIMESTAMP WITH TIME ZONE,
  IDUSUARIOMODIFICACION INTEGER,
  CANALMODIFICACION  CHARACTER VARYING(10),
  FECHAMODIFICACION TIMESTAMP WITH TIME ZONE,
  IDUSUARIOBAJA INTEGER,
  CANALBAJA  CHARACTER VARYING(10),
  FECHABAJA TIMESTAMP WITH TIME ZONE,
  CONSTRAINT USUARIO_PKEY PRIMARY KEY (IDUSUARIO)
);
ALTER TABLE SIGV_SEGURIDAD.USUARIO
    OWNER TO :postgres_user;

INSERT INTO SIGV_SEGURIDAD.USUARIO (USUARIO, CLAVE, IDPERFIL, IDCOLABORADOR, ESTADO, IDSUCURSAL, ONLINE, PCKGSMS, IDUSUARIOALTA, CANALALTA, FECHAALTA) VALUES ('ADMINISTRADOR','ADMIN',1,1,'A',1,0,1,0,'QUERY',NOW());
INSERT INTO SIGV_SEGURIDAD.USUARIO (USUARIO, CLAVE, IDPERFIL, IDCOLABORADOR, ESTADO, IDSUCURSAL, ONLINE, PCKGSMS, IDUSUARIOALTA, CANALALTA, FECHAALTA) VALUES ('CORONA','VIRUS',2,2,'A',1,1,0,1,'QUERY',NOW());
INSERT INTO SIGV_SEGURIDAD.USUARIO (USUARIO, CLAVE, IDPERFIL, IDCOLABORADOR, ESTADO, IDSUCURSAL, ONLINE, PCKGSMS, IDUSUARIOALTA, CANALALTA, FECHAALTA) VALUES ('JCARBONEL','JCARBONEL',2,3,'A',1,1,0,1,'QUERY',NOW());
INSERT INTO SIGV_SEGURIDAD.USUARIO (USUARIO, CLAVE, IDPERFIL, IDCOLABORADOR, ESTADO, IDSUCURSAL, ONLINE, PCKGSMS, IDUSUARIOALTA, CANALALTA, FECHAALTA) VALUES ('CJORGE','CJORGE',2,4,'A',1,1,0,1,'QUERY',NOW());
INSERT INTO SIGV_SEGURIDAD.USUARIO (USUARIO, CLAVE, IDPERFIL, IDCOLABORADOR, ESTADO, IDSUCURSAL, ONLINE, PCKGSMS, IDUSUARIOALTA, CANALALTA, FECHAALTA) VALUES ('FCONTRERAS','FCONTRERAS',2,5,'A',1,1,0,1,'QUERY',NOW());
INSERT INTO SIGV_SEGURIDAD.USUARIO (USUARIO, CLAVE, IDPERFIL, IDCOLABORADOR, ESTADO, IDSUCURSAL, ONLINE, PCKGSMS, IDUSUARIOALTA, CANALALTA, FECHAALTA) VALUES ('LFELIX','LFELIX',2,6,'A',1,1,0,1,'QUERY',NOW());
INSERT INTO SIGV_SEGURIDAD.USUARIO (USUARIO, CLAVE, IDPERFIL, IDCOLABORADOR, ESTADO, IDSUCURSAL, ONLINE, PCKGSMS, IDUSUARIOALTA, CANALALTA, FECHAALTA) VALUES ('VCERVANTES','VCERVANTES',2,7,'A',1,1,0,1,'QUERY',NOW());
INSERT INTO SIGV_SEGURIDAD.USUARIO (USUARIO, CLAVE, IDPERFIL, IDCOLABORADOR, ESTADO, IDSUCURSAL, ONLINE, PCKGSMS, IDUSUARIOALTA, CANALALTA, FECHAALTA) VALUES ('VFABRIZIO','VFABRIZIO',2,8,'A',1,1,0,1,'QUERY',NOW());

--SELECT * FROM SIGV_SEGURIDAD.USUARIO;
--DROP SCHEMA IF EXISTS SIGV_SEGURIDAD CASCADE;
--DROP TABLE IF EXISTS SIGV_SEGURIDAD.USUARIO;

CREATE TABLE IF NOT EXISTS SIGV_SEGURIDAD.SETTING(
  IDSETTING SERIAL NOT NULL,
  IDEMPRESA INTEGER,
  CODIGO CHARACTER VARYING(10),
  DESCRIPCION CHARACTER VARYING(100),
  MAXLOGEO INTEGER,
  CADUCIDAD INTEGER,
  ALERTACADUCIDAD INTEGER,
  CLAVEUSUARIONUEVO BIT(1),
  RESETINTENTOLOGEO INTERVAL,
  CONSTRAINT SETTING_PKEY PRIMARY KEY (IDSETTING)
);
ALTER TABLE SIGV_SEGURIDAD.SETTING
  OWNER TO :postgres_user;
  
INSERT INTO SIGV_SEGURIDAD.SETTING (IDEMPRESA, CODIGO, DESCRIPCION, MAXLOGEO, CADUCIDAD, ALERTACADUCIDAD, CLAVEUSUARIONUEVO,RESETINTENTOLOGEO) VALUES(1,'GLOBAL-001','CONFIGURACION INICIAL',3,30,3,1::BIT,'5 min');

--SELECT * FROM SIGV_SEGURIDAD.SETTING;
--DROP TABLE IF EXISTS SIGV_SEGURIDAD.SETTING;

CREATE TABLE IF NOT EXISTS SIGV_SEGURIDAD.LOG(
  IDLOG SERIAL NOT NULL,
  IDUSUARIOOPERACION INTEGER,
  CANALOPERACION  CHARACTER VARYING(10),
  FECHAOPERACION TIMESTAMP WITH TIME ZONE,
  IDOPERACION INTEGER,
  UNIQUEDEVICEID CHARACTER VARYING(20),
  DESCRIPCION CHARACTER VARYING(250),
  CONSTRAINT LOG_PKEY PRIMARY KEY (IDLOG)
);
ALTER TABLE SIGV_SEGURIDAD.LOG
  OWNER TO :postgres_user;

--SELECT * FROM SIGV_SEGURIDAD.LOG;
--DROP TABLE IF EXISTS SIGV_SEGURIDAD.LOG;

\echo ************************  5. CREACION DE TABLAS EN SIGV_PERSONA *****************************

CREATE TABLE IF NOT EXISTS SIGV_PERSONA.COLABORADOR(
  IDCOLABORADOR SERIAL NOT NULL,
  IDSUCURSAL INTEGER,
  APELLIDOPATERNO CHARACTER VARYING(20),
  APELLIDOMATERNO CHARACTER VARYING(20),
  NOMBRES CHARACTER VARYING(20),
  IDTIPODOCUMENTO INTEGER,
  NUMDOCUMENTO CHARACTER VARYING(15),
  RUC CHARACTER VARYING(20),
  FECHANACIMIENTO DATE,
  SEXO CHARACTER VARYING(1),
  ESTADO CHARACTER VARYING(1),
  IDUSUARIOALTA INTEGER,
  CANALALTA  CHARACTER VARYING(10),
  FECHAALTA TIMESTAMP WITH TIME ZONE,
  IDUSUARIOMODIFICACION INTEGER,
  CANALMODIFICACION  CHARACTER VARYING(10),
  FECHAMODIFICACION TIMESTAMP WITH TIME ZONE,
  IDUSUARIOBAJA INTEGER,
  CANALBAJA  CHARACTER VARYING(10),
  FECHABAJA TIMESTAMP WITH TIME ZONE,
  CONSTRAINT COLABORADOR_PKEY PRIMARY KEY (IDCOLABORADOR)
);
ALTER TABLE SIGV_PERSONA.COLABORADOR
    OWNER TO :postgres_user;
    
INSERT INTO SIGV_PERSONA.COLABORADOR (IDSUCURSAL, APELLIDOPATERNO, APELLIDOMATERNO, NOMBRES, IDTIPODOCUMENTO, NUMDOCUMENTO, RUC, FECHANACIMIENTO, SEXO, ESTADO, IDUSUARIOALTA, CANALALTA, FECHAALTA) VALUES(1,'LUYO','HERNANDEZ','LUIS',1,'74309370','0','1994-11-20','M','A',1,'QUERY',NOW());
INSERT INTO SIGV_PERSONA.COLABORADOR (IDSUCURSAL, APELLIDOPATERNO, APELLIDOMATERNO, NOMBRES, IDTIPODOCUMENTO, NUMDOCUMENTO, RUC, FECHANACIMIENTO, SEXO, ESTADO, IDUSUARIOALTA, CANALALTA, FECHAALTA) VALUES(1,'CORONA','VIRUS','COVID19',1,'74309370','0','2004-07-01','M','A',1,'QUERY',NOW());
INSERT INTO SIGV_PERSONA.COLABORADOR (IDSUCURSAL, APELLIDOPATERNO, APELLIDOMATERNO, NOMBRES, IDTIPODOCUMENTO, NUMDOCUMENTO, RUC, FECHANACIMIENTO, SEXO, ESTADO, IDUSUARIOALTA, CANALALTA, FECHAALTA) VALUES(1,'CARBONEL','VICENTE','JOHAN',1,'74309370','0','2004-07-01','M','A',1,'QUERY',NOW());
INSERT INTO SIGV_PERSONA.COLABORADOR (IDSUCURSAL, APELLIDOPATERNO, APELLIDOMATERNO, NOMBRES, IDTIPODOCUMENTO, NUMDOCUMENTO, RUC, FECHANACIMIENTO, SEXO, ESTADO, IDUSUARIOALTA, CANALALTA, FECHAALTA) VALUES(1,'CORDOVA','FERNANDEZ','JORGE',1,'74309370','0','2004-07-01','M','A',1,'QUERY',NOW());
INSERT INTO SIGV_PERSONA.COLABORADOR (IDSUCURSAL, APELLIDOPATERNO, APELLIDOMATERNO, NOMBRES, IDTIPODOCUMENTO, NUMDOCUMENTO, RUC, FECHANACIMIENTO, SEXO, ESTADO, IDUSUARIOALTA, CANALALTA, FECHAALTA) VALUES(1,'CONTRERAS','RAMIREZ','FELIPE',1,'74309370','0','2004-07-01','M','A',1,'QUERY',NOW());
INSERT INTO SIGV_PERSONA.COLABORADOR (IDSUCURSAL, APELLIDOPATERNO, APELLIDOMATERNO, NOMBRES, IDTIPODOCUMENTO, NUMDOCUMENTO, RUC, FECHANACIMIENTO, SEXO, ESTADO, IDUSUARIOALTA, CANALALTA, FECHAALTA) VALUES(1,'FELIX','LUYO','LIZETH',1,'74309370','0','2004-07-01','M','A',1,'QUERY',NOW());
INSERT INTO SIGV_PERSONA.COLABORADOR (IDSUCURSAL, APELLIDOPATERNO, APELLIDOMATERNO, NOMBRES, IDTIPODOCUMENTO, NUMDOCUMENTO, RUC, FECHANACIMIENTO, SEXO, ESTADO, IDUSUARIOALTA, CANALALTA, FECHAALTA) VALUES(1,'CERVANTES','HUALPARUCA','VICTOR',1,'74309370','0','2004-07-01','M','A',1,'QUERY',NOW());
INSERT INTO SIGV_PERSONA.COLABORADOR (IDSUCURSAL, APELLIDOPATERNO, APELLIDOMATERNO, NOMBRES, IDTIPODOCUMENTO, NUMDOCUMENTO, RUC, FECHANACIMIENTO, SEXO, ESTADO, IDUSUARIOALTA, CANALALTA, FECHAALTA) VALUES(1,'VICENTE','HERNANDEZ','FABRIZIO',1,'74309370','0','2004-07-01','M','A',1,'QUERY',NOW());

--SELECT * FROM SIGV_PERSONA.COLABORADOR;
--DROP SCHEMA IF EXISTS SIGV_PERSONA CASCADE;
--DROP TABLE IF EXISTS SIGV_PERSONA.COLABORADOR;

\echo ************************  6. CREACION DE TABLAS EN SIGV_VENTAS ******************************

CREATE TABLE IF NOT EXISTS SIGV_VENTAS.EMPRESASUCURSAL(
  IDEMPRESASUCURSAL SERIAL NOT NULL,
  IDEMPRESA INTEGER,
  IDSUCURSAL INTEGER,
  CONSTRAINT EMPRESASUCURSAL_PKEY PRIMARY KEY (IDEMPRESASUCURSAL)
);
ALTER TABLE SIGV_VENTAS.EMPRESASUCURSAL
  OWNER TO :postgres_user;
  
INSERT INTO SIGV_VENTAS.EMPRESASUCURSAL (IDEMPRESA, IDSUCURSAL) VALUES(1,1);

CREATE TABLE SIGV_VENTAS.SUCURSAL(
  IDSUCURSAL SERIAL NOT NULL,
  CODIGO CHARACTER VARYING(5),
  DESCRIPCION CHARACTER VARYING(100),
  DIRECCION CHARACTER VARYING(100),
  DISTRITO CHARACTER VARYING(100),
  PROVINCIA CHARACTER VARYING(100),
  DEPARTAMENTO CHARACTER VARYING(100),
  CONSTRAINT SUCURSAL_PKEY PRIMARY KEY (IDSUCURSAL)
);
ALTER TABLE SIGV_VENTAS.SUCURSAL
  OWNER TO :postgres_user;

INSERT INTO SIGV_VENTAS.SUCURSAL (CODIGO, DESCRIPCION, DIRECCION, DISTRITO, PROVINCIA, DEPARTAMENTO) VALUES('SV001', 'San Agustin SV', 'Jr. San Agustín 140','San Vicente', 'Cañete', 'Lima');

\echo ************************  7. CREACION DE TABLAS EN SIGV_INVENTARIO **************************

CREATE TABLE SIGV_INVENTARIO.CATEGORIA(
  IDCATEGORIA SERIAL NOT NULL,
  DESCRIPCION CHARACTER VARYING(100),
  ESTADO CHARACTER VARYING(1),
  CONSTRAINT CATEGORIA_PKEY PRIMARY KEY (IDCATEGORIA)
);
ALTER TABLE SIGV_INVENTARIO.CATEGORIA
  OWNER TO :postgres_user;

CREATE TABLE SIGV_INVENTARIO.MARCA(
  IDMARCA SERIAL NOT NULL,
  DESCRIPCION CHARACTER VARYING(50),
  ESTADO CHARACTER VARYING,
  CONSTRAINT MARCA_PKEY PRIMARY KEY (IDMARCA)
);
ALTER TABLE SIGV_INVENTARIO.MARCA
  OWNER TO :postgres_user;

CREATE TABLE SIGV_INVENTARIO.MEDIDA(
  IDMEDIDA SERIAL NOT NULL,
  DESCRIPCION CHARACTER VARYING(50),
  ABREVIADO CHARACTER VARYING(5),
  CONSTRAINT MEDIDA_PKEY PRIMARY KEY (IDMEDIDA)
);
ALTER TABLE SIGV_INVENTARIO.MEDIDA
  OWNER TO :postgres_user;

CREATE TABLE SIGV_INVENTARIO.SUBCATEGORIA(
  IDSUBCATEGORIA SERIAL NOT NULL,
  DESCRIPCION CHARACTER VARYING(200) NOT NULL,
  IDCATEGORIA INTEGER NOT NULL,
  ESTADO CHARACTER VARYING(1),
  CONSTRAINT SUBCATEGORIA_PKEY PRIMARY KEY (IDSUBCATEGORIA),
  CONSTRAINT SUBCATEGORIA_IDCATEGORIA_FKEY FOREIGN KEY (IDCATEGORIA)
      REFERENCES SIGV_INVENTARIO.CATEGORIA (IDCATEGORIA) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
);
ALTER TABLE SIGV_INVENTARIO.SUBCATEGORIA
  OWNER TO :postgres_user;

CREATE TABLE SIGV_INVENTARIO.SUBCATEGORIAMARCA(
  IDSUBCATEGORIAMARCA SERIAL NOT NULL,
  IDSUBCATEGORIA INTEGER,
  IDMARCA INTEGER,
  ESTADO CHARACTER VARYING(1),
  CONSTRAINT SUBCATEGORIAMARCA_PKEY PRIMARY KEY (IDSUBCATEGORIAMARCA),
  CONSTRAINT SUBCATEGORIAMARCA_IDMARCA_FKEY FOREIGN KEY (IDMARCA)
      REFERENCES SIGV_INVENTARIO.MARCA (IDMARCA) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT SUBCATEGORIAMARCA_IDSUBCATEGORIA_FKEY FOREIGN KEY (IDSUBCATEGORIA)
      REFERENCES SIGV_INVENTARIO.SUBCATEGORIA (IDSUBCATEGORIA) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
);
ALTER TABLE SIGV_INVENTARIO.SUBCATEGORIAMARCA
  OWNER TO :postgres_user;

CREATE TABLE SIGV_INVENTARIO.PRODUCTO(
  IDPRODUCTO SERIAL NOT NULL,
  CODIGO CHARACTER VARYING(20),
  DESCRIPCION CHARACTER VARYING(200),
  TIPO CHARACTER VARYING(1),
  IDSUBCATEGORIA INTEGER,
  IDMARCA INTEGER,
  IDMEDIDA INTEGER,
  STOCK_MIN NUMERIC(12,2),
  STOCK_MAX NUMERIC(12,2),
  COSTO NUMERIC(12,2),
  PVENTA NUMERIC(12,2),
  IMAGEN CHARACTER VARYING(200),
  ESTADO CHARACTER VARYING(1),
  IDUSUARIOALTA INTEGER,
  CANALALTA CHARACTER VARYING(10),
  FECHAALTA TIMESTAMP WITH TIME ZONE,
  IDUSUARIOMODIFICACION INTEGER,
  CANALMODIFICACION  CHARACTER VARYING(10),
  FECHAMODIFICACION TIMESTAMP WITH TIME ZONE,
  IDUSUARIOBAJA INTEGER,
  CANALBAJA  CHARACTER VARYING(10),
  FECHABAJA TIMESTAMP WITH TIME ZONE,
  CONSTRAINT PRODUCTO_PKEY PRIMARY KEY (IDPRODUCTO),
  CONSTRAINT PRODUCTO_IDSUBCATEGORIA_FKEY FOREIGN KEY (IDSUBCATEGORIA)
      REFERENCES SIGV_INVENTARIO.SUBCATEGORIA (IDSUBCATEGORIA) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT PRODUCTO_IDMARCA_FKEY FOREIGN KEY (IDMARCA)
      REFERENCES SIGV_INVENTARIO.MARCA (IDMARCA) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT PRODUCTO_IDMEDIDA_FKEY FOREIGN KEY (IDMEDIDA)
      REFERENCES SIGV_INVENTARIO.MEDIDA (IDMEDIDA) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
);
ALTER TABLE SIGV_INVENTARIO.PRODUCTO
  OWNER TO :postgres_user;

CREATE TABLE SIGV_INVENTARIO.STOCK(
  IDSTOCK SERIAL NOT NULL,
  MES CHARACTER VARYING(2),
  PERIODO CHARACTER VARYING(4),
  IDSUCURSAL INTEGER,
  DESCRIPCION CHARACTER VARYING(20),
  IDUSUARIOAPERTURA INTEGER,
  CANALAPERTURA CHARACTER VARYING(10),
  FECHAAPERTURA TIMESTAMP WITH TIME ZONE,
  IDUSUARIOCIERRA INTEGER,
  CANALCIERRA CHARACTER VARYING(10),
  FECHACIERRE TIMESTAMP WITH TIME ZONE,
  OBSERVACION CHARACTER VARYING(200),
  ESTADO CHARACTER VARYING(1),
  CONSTRAINT STOCK_PKEY PRIMARY KEY (IDSTOCK),
  CONSTRAINT STOCK_IDSUCURSAL_FKEY FOREIGN KEY (IDSUCURSAL)
      REFERENCES SIGV_VENTAS.SUCURSAL (IDSUCURSAL) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
);
ALTER TABLE SIGV_INVENTARIO.STOCK
  OWNER TO :postgres_user;

CREATE TABLE SIGV_INVENTARIO.STOCKD(
  IDSTOCKD SERIAL NOT NULL,
  CODIGO INTEGER,
  IDSTOCK INTEGER,
  IDPRODUCTO INTEGER,
  IDVENTAD INTEGER,
  IDMOVIMIENTO INTEGER,
  CANTIDAD NUMERIC(16,3),
  FECHASTOCKEO TIMESTAMP WITH TIME ZONE,
  ESTADO CHARACTER VARYING(1),
  CONSTRAINT STOCKD_PKEY PRIMARY KEY (IDSTOCKD)
);
ALTER TABLE SIGV_INVENTARIO.STOCKD
  OWNER TO :postgres_user;  
  
\echo ************************  FIN EJECUCION SCRIPT 1.Schema-Table.sql  ************************